spring.application.name=gestorcromos


spring.datasource.url=jdbc:h2:mem:cromosdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.url → tells Spring where the database is.
#jdbc:h2:mem:cromosdb → means “use an H2 in-memory database named cromosdb.”
#DB_CLOSE_DELAY=-1 → keeps it alive as long as your app is running.
#DB_CLOSE_ON_EXIT=FALSE → prevents H2 from shutting down automatically.



spring.datasource.driverClassName=org.h2.Driver
#The driver is a tiny Java library that knows how to talk to the database.
#This tells Spring -> Hey, use the H2 driver when opening a connection.


# Default H2 credentials (no real security; fine for local dev)
spring.datasource.username=sa
spring.datasource.password=



spring.jpa.hibernate.ddl-auto=update
#JPA = Java Persistence API (the system that maps your classes to database tables).
#Hibernate = the library doing the actual work for JPA.
#ddl-auto=update means:Automatically create or update tables based on my @Entity classes.”

#So Hibernate sees your class:
#@Entity
#public class Cromo { ... }

#and runs an SQL command like:
#create table if not exists cromo (
#  id bigint auto_increment primary key,
#  nombre varchar(255),
#  serie varchar(255),
#  numero int,
#  rareza varchar(255),
#  anio int,
#  repetido boolean
#);




# This makes Hibernate print every SQL statement it executes in the console.
spring.jpa.show-sql=true

# Enable a tiny web UI to inspect the DB at /h2-console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
#Enables a web interface to explore your database.
#Once your app is running, you can go to:
#http://localhost:8080/h2-console
#and see the database tables visually (no SQL commands needed).
# In short: It gives you a mini database browser inside your app.


#Here’s the full picture of what Spring Boot is doing because of this file:
#Spring Boot starts.
#It reads application.properties.
#It sees you want to use H2 and configures a connection to it.
#It loads your @Entity classes (Cromo).
#It uses Hibernate to automatically generate the table in the database.
#It starts Tomcat (the embedded web server).
#It opens the port 8080 and waits for requests.
#If you go to /h2-console, you can open the database and inspect it.